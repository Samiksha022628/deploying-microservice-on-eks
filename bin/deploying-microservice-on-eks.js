#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const IamAndVpc_stack_1 = require("../lib/IamAndVpc-stack");
const EksCluster_stack_1 = require("../lib/EksCluster-stack");
const app = new cdk.App();
const targetStack = app.node.tryGetContext('stack');
const env = { account: '654654582602', region: 'us-east-1' };
if (!targetStack) {
    console.log('No context provided. Skipping stack instantiation. This is safe for "cdk bootstrap".');
}
else if (targetStack === 'iam-vpc') {
    new IamAndVpc_stack_1.IamAndVpcStack(app, 'IamAndVpcStack', { env });
}
else if (targetStack === 'eks-cluster') {
    new EksCluster_stack_1.EksClusterStack(app, 'EksClusterStack', { env });
}
else {
    throw new Error(`Unknown context stack "${targetStack}". Expected "iam-vpc" or "eks-cluster".`);
}
/* If you don't specify 'env', this stack will be environment-agnostic.
 * Account/Region-dependent features and context lookups will not work,
 * but a single synthesized template can be deployed anywhere. */
/* Uncomment the next line to specialize this stack for the AWS Account
 * and Region that are implied by the current CLI configuration. */
// env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
/* Uncomment the next line if you know exactly what Account and Region you
 * want to deploy the stack to. */
/* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */ 
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95aW5nLW1pY3Jvc2VydmljZS1vbi1la3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXBsb3lpbmctbWljcm9zZXJ2aWNlLW9uLWVrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBbUM7QUFDbkMsNERBQXdEO0FBQ3hELDhEQUEwRDtBQUUxRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwRCxNQUFNLEdBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBRTdELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLHNGQUFzRixDQUFDLENBQUM7QUFDdEcsQ0FBQztLQUFNLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRSxDQUFDO0lBQ3JDLElBQUksZ0NBQWMsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELENBQUM7S0FBTSxJQUFJLFdBQVcsS0FBSyxhQUFhLEVBQUUsQ0FBQztJQUN6QyxJQUFJLGtDQUFlLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2RCxDQUFDO0tBQU0sQ0FBQztJQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLFdBQVcseUNBQXlDLENBQUMsQ0FBQztBQUNsRyxDQUFDO0FBQ0M7O2lFQUVpRTtBQUVqRTttRUFDbUU7QUFDbkUsNkZBQTZGO0FBRTdGO2tDQUNrQztBQUVsQyw4RkFBOEYiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgSWFtQW5kVnBjU3RhY2sgfSBmcm9tICcuLi9saWIvSWFtQW5kVnBjLXN0YWNrJztcbmltcG9ydCB7IEVrc0NsdXN0ZXJTdGFjayB9IGZyb20gJy4uL2xpYi9Fa3NDbHVzdGVyLXN0YWNrJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHRhcmdldFN0YWNrID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnc3RhY2snKTtcbmNvbnN0IGVudiA9IHsgYWNjb3VudDogJzY1NDY1NDU4MjYwMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfTtcblxuaWYgKCF0YXJnZXRTdGFjaykge1xuICBjb25zb2xlLmxvZygnTm8gY29udGV4dCBwcm92aWRlZC4gU2tpcHBpbmcgc3RhY2sgaW5zdGFudGlhdGlvbi4gVGhpcyBpcyBzYWZlIGZvciBcImNkayBib290c3RyYXBcIi4nKTtcbn0gZWxzZSBpZiAodGFyZ2V0U3RhY2sgPT09ICdpYW0tdnBjJykge1xuICBuZXcgSWFtQW5kVnBjU3RhY2soYXBwLCAnSWFtQW5kVnBjU3RhY2snLCB7IGVudiB9KTtcbn0gZWxzZSBpZiAodGFyZ2V0U3RhY2sgPT09ICdla3MtY2x1c3RlcicpIHtcbiAgbmV3IEVrc0NsdXN0ZXJTdGFjayhhcHAsICdFa3NDbHVzdGVyU3RhY2snLCB7IGVudiB9KTtcbn0gZWxzZSB7XG4gIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjb250ZXh0IHN0YWNrIFwiJHt0YXJnZXRTdGFja31cIi4gRXhwZWN0ZWQgXCJpYW0tdnBjXCIgb3IgXCJla3MtY2x1c3RlclwiLmApO1xufVxuICAvKiBJZiB5b3UgZG9uJ3Qgc3BlY2lmeSAnZW52JywgdGhpcyBzdGFjayB3aWxsIGJlIGVudmlyb25tZW50LWFnbm9zdGljLlxuICAgKiBBY2NvdW50L1JlZ2lvbi1kZXBlbmRlbnQgZmVhdHVyZXMgYW5kIGNvbnRleHQgbG9va3VwcyB3aWxsIG5vdCB3b3JrLFxuICAgKiBidXQgYSBzaW5nbGUgc3ludGhlc2l6ZWQgdGVtcGxhdGUgY2FuIGJlIGRlcGxveWVkIGFueXdoZXJlLiAqL1xuXG4gIC8qIFVuY29tbWVudCB0aGUgbmV4dCBsaW5lIHRvIHNwZWNpYWxpemUgdGhpcyBzdGFjayBmb3IgdGhlIEFXUyBBY2NvdW50XG4gICAqIGFuZCBSZWdpb24gdGhhdCBhcmUgaW1wbGllZCBieSB0aGUgY3VycmVudCBDTEkgY29uZmlndXJhdGlvbi4gKi9cbiAgLy8gZW52OiB7IGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIH0sXG5cbiAgLyogVW5jb21tZW50IHRoZSBuZXh0IGxpbmUgaWYgeW91IGtub3cgZXhhY3RseSB3aGF0IEFjY291bnQgYW5kIFJlZ2lvbiB5b3VcbiAgICogd2FudCB0byBkZXBsb3kgdGhlIHN0YWNrIHRvLiAqL1xuXG4gIC8qIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2Nkay9sYXRlc3QvZ3VpZGUvZW52aXJvbm1lbnRzLmh0bWwgKi8iXX0=