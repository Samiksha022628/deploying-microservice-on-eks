name: microservice deployment

on:
  push:
    branches: master

jobs:
  deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Install dependencies
        run: npm install 

      - name: Bootstrap CDK
        run: cdk bootstrap aws://654654582602/us-east-1

      - name: Replace placeholders in Secret manifest
        run: |
          sed -e "s|PLACEHOLDER_AWS_ACCESS_KEY_ID|${{ secrets.AWS_ACCESS_KEY_ID }}|" \
              -e "s|PLACEHOLDER_AWS_SECRET_ACCESS_KEY|${{ secrets.AWS_SECRET_ACCESS_KEY }}|" \
              manifests/configMap-secret.yaml    

      - name: Get caller identity
        run: |
          aws sts get-caller-identity

      - name: Deploy CDK Stack for IAM role and Vpc
        run: cdk deploy --context stack=iam-vpc

      - name: Get IAM Role ARN from CloudFormation
        id: get_role
        run: |
          ROLE_ARN=$(aws cloudformation describe-stacks \
          --stack-name IamAndVpcStack \
          --query "Stacks[0].Outputs[?OutputKey=='IamRoleForClusterArn'].OutputValue" \
          --output text)
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Install jq (required for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Assume IAM role
        id: assume_role
        run: |
          CREDS=$(aws sts assume-role \
          --role-arn "${{ steps.get_role.outputs.role_arn }}" \
          --role-session-name GitHubActionsSession)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Get caller identity
        run: |
          aws sts get-caller-identity

      - name: Update kubeconfig for EKS Cluster
        run: |
          aws eks update-kubeconfig --region us-east-1 --name EksCluster  
         
      - name: Test kubectl authentication
        run: kubectl get nodes

      - name: Apply namespace manifest
        run: |
          kubectl apply -f manifests/namespace.yaml --validate=false

      - name: Deploy EKS cluster Stack
        run: cdk deploy --context stack=eks-cluster

